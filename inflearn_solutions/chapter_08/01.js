// 재귀함수 (DFS with recursion) : 자연수 N이 입력되면 재귀함수를 이용하여 1부터 N까지를 출력하는 프로그램을 작성하세요
// 재귀함수는 스택을 사용 (LIFO)

function solution (N) {
    function dfsR(L) { // L은 level을 뜻함. 깊이 들어간다고
        if (L===0) { // 이게 무한으로 도니까 멈추기는 해야하잖아. DFS(0)이 되면 재귀 함수를 종료.
            return;
        } else {
            // console.log(L) // 이렇게하면 3 2 1 순으로 출력된다. 그러나 우리가 원하는 출력값은 3 2 1이므로 DFS(L-1)아래줄에다 입력해준다.
            dfsR(L-1); // 자기가 자기 자신을 호출하는게 재귀함수. 대신 L-1이렇게 호출하는거다. DFS(3) -> DFS(3-1) -> DFS(2-1) -> DFS(1-1). 이런 식으로 DFS(0)이 될 때까지 계속 자기 자신을 호출한다
            console.log(L); // 이렇게하면 1 2 3 순으로 출력된다! 오메. 바로 윗줄의 재귀함수 때문이야. line 9로 내려오기도 전에 line 8에서 자기 자신을 계속 호출(호출할 때 스택에 계속 스택 프레임을 쌓음. 쌓일 때 매개변수 L=3이 제일 먼저 아래로 가서 쌓인다, 그 위로 매개변수 L=2, 그 위로 매개변수 L=1). 그러다가 DFS(0)이 되면 비로소 함수를 종료. 그러면 이제 스택에서 쌓여있던 스택프레임이 pop으로 사라진다(스택은 LIFO이므로 맨 위에서부터 나와서 사라짐. 사라질 떄는 쌓을 떄랑 반대 순서로 매개변수 L=1부터 사라지고, 그 아래 L=2, 마지막이 그 아래 L=3). 사라질 때 복귀 주소라는게 있어서 line 8로 복귀한다. 그러고 나면 line 9의 console.log가 실행이 되는 것이다. 
        }
    }

    dfsR(N);
}

solution(3);



